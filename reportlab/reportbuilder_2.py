from datetime import datetime
import re, csv, os

from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
from reportlab.lib import utils, colors
from reportlab.pdfgen import canvas
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.platypus import Flowable, Table, TableStyle
from reportlab.pdfbase.pdfmetrics import stringWidth

version = '1.0.0'




#################################################################################
### Make header and footer to be repeated on each page
#################################################################################

class PageNumCanvas(canvas.Canvas):

    def __init__(self, *args, **kwargs):
        '''Constructor'''
        canvas.Canvas.__init__(self, *args, **kwargs)
        self.pages = []

    def showPage(self): #override
        '''On a page break, add new page info to list'''
        self.pages.append(dict(self.__dict__))
        self._startPage()

    def save(self): #override
        '''Get total pages, then draw 'Page x of y' text on each page'''
        page_count = len(self.pages)
        for page in self.pages:
            self.__dict__.update(page)
            self.draw_page_number(page_count)
            canvas.Canvas.showPage(self)

        canvas.Canvas.save(self)

    def draw_page_number(self, page_count):
        '''Format 'Page x of y' text in bottom right corner of each page'''
        page = 'Page %s of %s' % (self._pageNumber, page_count)
        self.setFont('Helvetica-Oblique', 9)
        self.drawRightString(7.75*inch-5, 0.5*inch+3, page)


def strip_ascii(text):
    '''Remove non-ASCII characters from string'''
    return "".join(char for char in text
                    if 31 < ord(char) < 127
                  )


def footer(canvas, doc):
    '''Draw left-aligned footer with version and date info'''
    width, height = doc.pagesize
    styles = getSampleStyleSheet()
    font_size = 9
    
    # left aligned part
    ptext = '''<font size={fsize}><em>
            Generated by ReFocus Assistant version {ver} 
            at {date}
            </em></font>'''.format(fsize=font_size,
                                   ver=version,
                                   date=datetime.now().strftime('%d-%b-%Y %H:%M:%S'))
    p = Paragraph(ptext, styles['Normal'])
    p.wrapOn(canvas, width, height)
    p.drawOn(canvas, doc.leftMargin+5, 0.5*inch)

    # right aligned part - 'Page x of y' - is covered by PageNumCanvas



def header(canvas, doc):
    '''Draw header with right-aligned experiment name'''
    width, height = doc.pagesize
    styles = getSampleStyleSheet()
    font_size = 9
    regex = re.compile('<.*?>') #lazy - match as few chars as possible between <>
    
    # left aligned part of header
    ptext = '<font size={}><em>Report</em></font>'.format(font_size)
    p = Paragraph(ptext, styles['Normal'])
    p.wrapOn(canvas, width, height)
    p.drawOn(canvas, doc.leftMargin+5, height - doc.topMargin)

    # right aligned part of header
    ptext = '''<font size={0}><em>{1}</em></font>'''.format(font_size, doc.name)
    p = Paragraph(ptext, styles['Normal'])
    p_width = stringWidth(re.sub(regex, '', ptext), styles['Normal'].fontName, font_size)
    p.wrapOn(canvas, width, height)
    p.drawOn(canvas, width - doc.rightMargin - p_width - 5, height - doc.topMargin)



def header_and_footer(canvas, doc):
    '''Draw header and footer on same page'''
    header(canvas, doc)
    footer(canvas, doc)



#######################################################################################
### Create flowable page formatting
#######################################################################################

class Header(Flowable):
    '''First-page header with logo and minimal text'''
    def __init__(self, width=2*inch, height=0.2*inch):
        Flowable.__init__(self)
        self.width = width
        self.height = height
        self.styles = getSampleStyleSheet()

    def coord(self, x, y, unit=1):
        '''Based on (x,y) in inches or mm, get coordinate in points'''
        x, y = x*unit, self.height - y*unit
        return x, y
    
    def draw(self):
        '''Draw logo and minimal text'''
        img_filepath = r"C:\Users\lucy\OneDrive - Aldatu Biosciences\Desktop\PANDAA qPCR Results\vhf\aldatulogo_icon.gif"
        desired_width = 30

        img = utils.ImageReader(img_filepath) #ImageReader uses Pillow to get information about image, so that we can grab the image size
        img_width, img_height = img.getSize()
        aspect = img_height / float(img_width) #calculate aspect ratio based on obtained height and width information
        img = Image(img_filepath,
                width=desired_width,
                height=(desired_width * aspect)) #scale height based on aspect ratio
        img.wrapOn(self.canv, self.width, self.height)
        img.drawOn(self.canv, *self.coord(0,0,inch))

        ptext = '<font size=18><b>Report</b></font>'
        p = Paragraph(ptext, self.styles['Normal'])
        p.wrapOn(self.canv, self.width, self.height)
        p.drawOn(self.canv, *self.coord(0.55,-0.2, inch))


class Report:
    '''Report class'''
    def __init__(self, pdf_file, head, results, pagesize=letter):
        ''''''
        self.doc = SimpleDocTemplate(pdf_file, pagesize=pagesize,
                                     rightMargin=0.75*inch, leftMargin=0.75*inch,
                                     topMargin=0.75*inch, bottomMargin=0.75*inch)
        self.elements = []
        self.styles = getSampleStyleSheet()
        self.width, self.height = pagesize
        self.head = head
        self.results = results
        self.doc.name = ''


    def coord(self, x, y, unit=1):
        '''Based on (x,y) in inches or mm, get coordinate in points'''
        x, y = x*unit, self.height - y*unit
        return x, y
    

    def create_text(self, text, size=10, bold=False):
        '''Convert string to Paragraph object'''
        if bold:
            return Paragraph('''<font size={size}><b>
            {text}</b></font>
            '''.format(size=size, text=text),
               self.styles['Normal'])

        return Paragraph('''<font size={size}>
        {text}</font>
        '''.format(size=size, text=text),
           self.styles['Normal'])
    

    def get_exp_name(self, file, use_path=False, kw=None):
        '''Find file name in run info metadata'''
        if use_path: #use filepath to get file's name, use as experiment name
            return os.path.splitext(os.path.basename(file))[0]
        
        with open(file, newline='') as csvfile:
            reader = csv.reader(csvfile, delimiter=',')
            
            if kw: #find keyword in first column of table, return value of second column
                for row in reader:
                    if kw in row[0]:
                        return row[1]
            else: #default - find "Experiment Name" in first column (or similar wording), return value of second column
                for row in reader:
                    if 'Name' in row[0] and 'File' not in row[0]:
                        return row[1] 
        
        return 'None'
    

    def csv_to_table(self, file, bold='left'):
        '''Convert CSV data to list of Paragraph objects, for use in Reportlab Table object'''
        data = []
        with open(file, newline='') as csvfile:
            reader = csv.reader(csvfile, delimiter=',')
            
            if bold == 'left': #make left-most column bold
                for row in reader:
                    row_data = []
                    first = True
                    for item in row:
                        if item != '':
                            plain = strip_ascii(item)
                            if first:
                                row_data.append(self.create_text(plain, bold=True))
                                first = False
                            else:
                                row_data.append(self.create_text(plain))
                    if len(row_data) > 1: #if there's data in this row, add it to list
                        data.append(row_data)


            elif bold == 'top': #make top row bold
                first = True
                for row in reader:
                    row_data = []
                    for item in row:
                        if item != '':
                            plain = strip_ascii(item)
                            if first:
                                row_data.append(self.create_text(plain, bold=True))
                            else:
                                row_data.append(self.create_text(plain))
                    if len(row_data) > 1: #if there's data in this row, add it to list
                        data.append(row_data)
                    if first:
                        first = False
        return data
    

    def create_header(self):
        '''Create Header object'''
        header = Header()
        self.elements.append(header)
    

    def create_run_info(self):
        '''Draw run info table for traceability/quality purposes'''
        ptext = '<font size=14><b>Run Information</b></font>'
        p = Paragraph(ptext, self.styles['Normal'])
        self.elements.append(p)
        self.elements.append(Spacer(1,0.2*inch))

        data = self.csv_to_table(self.head, bold='left')
        self.doc.name = self.get_exp_name(self.head)

        colWidths = [1.125*inch, 5.7*inch] #original: 0.875*inch, 5.95*inch
        table_style = TableStyle([('INNERGRID', (0,0), (-1,-1), 0.25, colors.black),
                                  ('BOX', (0,0), (-1,-1), 0.25, colors.black),
                                  ('VALIGN',(0,0),(-1,-1),'MIDDLE')])

        table = Table(data, colWidths=colWidths)
        table.setStyle(table_style)
        table.hAlign = 'LEFT'
        self.elements.append(table)
        self.elements.append(Spacer(1, 0.3*inch))


    def create_results(self):
        '''Draw run results table'''
        ptext = '<font size=14><b>Samples</b></font>'
        p = Paragraph(ptext, self.styles['Normal'])
        self.elements.append(p)
        self.elements.append(Spacer(1, 0.2*inch))

        data = self.csv_to_table(self.results, bold='top')
        colWidths = [0.5*inch, 3.625*inch, 2.75*inch]
        table_style = TableStyle([('INNERGRID', (0,0), (-1,-1), 0.25, colors.black),
                                  ('BOX', (0,0), (-1,-1), 0.25, colors.black),
                                  ('VALIGN',(0,0),(-1,-1),'MIDDLE')])

        table = Table(data,
                      colWidths=colWidths,
                      repeatRows=1)
        table.setStyle(table_style)
        table.hAlign = 'LEFT'
        self.elements.append(table)


    def create(self):
        '''Create Report PDF with header, run info table, results table'''
        self.create_header()
        self.create_run_info()
        self.create_results()
        self.save()


    def save(self):
        '''Build Report doc'''
        self.doc.build(self.elements,
                       onFirstPage=footer,
                       onLaterPages=header_and_footer,
                       canvasmaker=PageNumCanvas)



#############################################################
### Run program
#############################################################


if __name__ == '__main__':
    pdf_file = 'results_example.pdf'
    header_file = r'C:\Users\lucy\OneDrive - Aldatu Biosciences\Desktop\PANDAA qPCR Results\reportlab\sample_header.csv'
    data_file = 'sample_results.csv'
    results = Report(pdf_file, header_file, data_file)
    results.create()
